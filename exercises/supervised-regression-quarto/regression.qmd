---
title: "Exercise 1 -- ML Basics"
subtitle: "[Introduction to Machine Learning](https://slds-lmu.github.io/i2ml/)"
notebook-view:
  - notebook: _r.ipynb
    title: "Notebook for R"
  - notebook: _python.ipynb
    title: "Notebook for Python"  
---

::: {.content-hidden when-format="pdf"}
::: {.hidden}
{{< include ../_quarto/latex-math.qmd >}}
:::
:::

## Exercise 1: HRO in coding frameworks

::: {.callout-note title="Learning goals" icon=false}
TBD
:::

Throughout the lecture, we will frequently use the `R` package 
`mlr3`, resp. the `Python` package 
`sklearn`, and its descendants, providing an integrated ecosystem for all 
common machine learning tasks.
Let's recap the HRO principle and see how it is reflected in either `mlr3` or `sklearn`.
An overview of the most important objects and their usage, illustrated with 
numerous examples, can be found at [the `mlr3` book](https://mlr3book.mlr-org.com/) and
[the `scikit` documentation](https://scikit-learn.org/stable/index.html).

***
How are the key concepts (i.e., hypothesis space, risk and optimization) 
you learned about in the lecture videos implemented?
  
::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#hro-objects echo=true >}}
### Python
{{< embed _python.ipynb#hro-objects echo=true >}}
:::
</details> 
:::

***
Have a look at`mlr3::tsk("iris")` / `sklearn.datasets.load_iris`. What attributes does this object store?

::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#hro-task echo=true >}}
### Python
{{< embed _python.ipynb#hro-task echo=true >}}
:::
</details> 
:::

***
Instantiate a regression tree learner. What are the different settings for this learner?

<details> 
<summary>*Hint*</summary>
::: {.panel-tabset}
### R
Use `lrn("regr.rpart")` (`mlr3::mlr_learners$keys()` shows all available learners).

### Python
Use the `DecisionTreeRegressor` module and use `get_params()` to see all available settings.
:::
</details> 

::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#hro-learner echo=true >}}
### Python
{{< embed _python.ipynb#hro-learner echo=true >}}
:::
</details> 
:::

## Exercise 2: Loss functions for regression tasks

::: {.callout-note title="Learning goals" icon=false}
TBD
:::

{{< include _ex_loss_functions.qmd >}}

## Exercise 3: Polynomial regression

::: {.callout-note title="Learning goals" icon=false}
TBD
:::

{{< include _ex_polynomial.qmd >}}

## Exercise 4: Predicting `abalone`

::: {.callout-note title="Learning goals" icon=false}
TBD
:::

We want to predict the age of an abalone using its longest shell measurement and 
its weight.
The `abalone` data can be found here: [https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data](https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data).

Prepare the data as follows:

::: {.panel-tabset}
### R
{{< embed _r.ipynb#abalone-data echo=true eval=false >}}

### Python
Call `from sklearn.metrics import mean_absolute_error`.
:::

***
Plot `LongestShell` and `WholeWeight` on the $x$- and $y$-axis, respectively, and color points according to `Rings`.

::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#abalone-plot echo=true >}}
### Python
Call `from sklearn.metrics import mean_absolute_error`.
:::
</details> 
:::

***
Using `mlr3`/`sklearn`, fit a linear regression model to the data.

::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#abalone-task echo=true >}}
.
{{< embed _r.ipynb#abalone-predict echo=true >}}
### Python
Call `from sklearn.metrics import mean_absolute_error`.
:::
</details> 
:::

***
Compare the fitted and observed targets visually.

<details> 
<summary>*Hint*</summary>
::: {.panel-tabset}
### R
Use `$autoplot()` from `mlr3viz`.

### Python
tbd
:::
</details> 

::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#abalone-viz echo=true >}}

### Python
tbd
:::
</details> 
:::

***
Assess the model's training loss in terms of MAE.

<details> 
<summary>*Hint*</summary>
::: {.panel-tabset}
### R
Call `$score()`, which accepts 
different `mlr_measures`, on the prediction object.

### Python
Call `from sklearn.metrics import mean_absolute_error`.
:::
</details> 

::: {.content-visible when-profile="solution"}
<details> 
<summary>**Solution**</summary>
::: {.panel-tabset}
### R
{{< embed _r.ipynb#abalone-eval echo=true >}}
### Python
tbd
:::
</details> 
:::